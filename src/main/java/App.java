import java.util.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static final List<Item> ALL_ITEMS = Arrays.asList(
            new Item("ITEM0001", "Braised chicken", 18.00),
            new Item("ITEM0013", "Chinese hamburger", 6.00),
            new Item("ITEM0022", "Cold noodles", 8.00),
            new Item("ITEM0030", "coca-cola", 2.00)
    );

    public static final List<SalesPromotion> ALL_SALES_PROMOTIONS = Arrays.asList(
            new SalesPromotion("BUY_30_SAVE_6_YUAN", "Deduct 6 yuan when the order reaches 30 yuan", Arrays.asList()),
            new SalesPromotion("50%_DISCOUNT_ON_SPECIFIED_ITEMS", "Half price for certain dishes", Arrays.asList(
                    "ITEM0001", "ITEM0022"
            ))
    );

    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    //get order list
    public static String getOrderList(String str) {
        String nameAndNo[] = str.split(" x ");

        for (Item item : ALL_ITEMS) {
            if (item.getId().equals(nameAndNo[0])) {  //找到菜了
                String cai = item.getName();
                int num = Integer.parseInt(nameAndNo[1]);
                double sum = num * item.getPrice();
                int int_sum = (int) sum;
                String res = cai + " x " + num + " = " + int_sum + " yuan\n";
                return res;
            }
        }
        return "";
    }


    public static String halfRes(List<String> inputs) {
        Map<String, Integer> mapIdAndNo = new LinkedHashMap<>();

        for (String item : inputs) {
            String idAndNo[] = item.split(" x ");
            if (mapIdAndNo.containsKey(idAndNo[0])) {
                int old = mapIdAndNo.get(idAndNo[0]);
                mapIdAndNo.put(idAndNo[0], Integer.parseInt(idAndNo[1]) + old); //ITEM0001 x 1
            } else {
                mapIdAndNo.put(idAndNo[0], Integer.parseInt(idAndNo[1])); //ITEM0001 x 1
            }
        }

        //先判断解决没有半价且不足30块的问题。
        int flag = 0;
        for (String key : mapIdAndNo.keySet()) {
            if (key.equals("ITEM0001") || key.equals("ITEM00022")) {
                flag = 1;
                break;
            }
        }
        if (flag == 0) { //无半价情况
            int sum = 0;
            for (String key : mapIdAndNo.keySet()) {
                for (Item item : ALL_ITEMS) {
                    if (item.getId().equals(key)) {
                        sum += (int) (item.getPrice()) * mapIdAndNo.get(key);
                    }
                }
            }
            if (sum < 30) { //无半价情况不足30元
                return "Total：" + sum + " yuan\n";
            }
        }

        // 计算半价价格和情况
        int sumHalf = 0;
        List<String> HalfName = new ArrayList<>();
        int save = 0;
        for (String key : mapIdAndNo.keySet()) {
            for (Item item : ALL_ITEMS) {
                if (item.getId().equals(key) && (key.equals("ITEM0001") || key.equals("ITEM0022"))) { //半价
                    sumHalf += (int) (item.getPrice() / 2) * mapIdAndNo.get(key);
                    HalfName.add(item.getName());
                    save += (int) (item.getPrice() / 2);
                } else if (item.getId().equals(key)) {
                    sumHalf += (int) (item.getPrice()) * mapIdAndNo.get(key);
                }
            }
        }

        //计算满30的情况
        int sum30 = 0;
        for (String key : mapIdAndNo.keySet()) {
            for (Item item : ALL_ITEMS) {
                if (item.getId().equals(key)) {
                    sum30 += (int) (item.getPrice()) * mapIdAndNo.get(key);
                }
            }
        }
        if (sum30 >= 30) {
            sum30 -= 6;
        }

        if (sum30 <= sumHalf) {   //满30减6

            String str =
                    "Promotion used:\n" +
                            "满30减6 yuan，saving 6 yuan\n" +
                            "-----------------------------------\n" +
                            "Total：" + sum30 + " yuan\n";
            return str;
        } else { //半价
            boolean ifFirst = true;
            String dish = "";
            for (String ss : HalfName) {
                if (!ifFirst) {
                    dish = dish + "，" + ss;
                } else {
                    dish = dish + ss;
                    ifFirst = false;
                }
            }
            String str =
                    "Promotion used:\n" +
                            "Half price for certain dishes (" + dish + ")，saving " + save + " yuan\n" +
                            "-----------------------------------\n" +
                            "Total：" + sumHalf + " yuan\n";
            return str;
        }
    }


    public static void main(String[] args) {
//        List<String> inputs = Arrays.asList("ITEM0001 x 1", "ITEM0013 x 2", "ITEM0022 x 1");
//        System.out.println(halfRes(inputs));
//        System.out.println(getOrderList("ITEM0013 x 4"));
//        List<String> inputs = Arrays.asList("ITEM0013 x 4", "ITEM0022 x 1");
//        String lastRes = "============= Order details =============\n";
//
//        String oneStrng = "";
//        for (String item : inputs) {
//            oneStrng += getOrderList(item);
//        }
//        lastRes = lastRes + oneStrng + "-----------------------------------\n";
//        lastRes+=halfRes(inputs)+"===================================";
//        System.out.println(lastRes);

    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        String lastRes = "============= Order details =============\n";

        String oneStrng = "";
        for (String item : inputs) {
            oneStrng += getOrderList(item);
        }
        lastRes = lastRes + oneStrng + "-----------------------------------\n";
        lastRes+=halfRes(inputs)+"===================================";

        return lastRes;
    }
}
